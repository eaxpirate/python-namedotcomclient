#!/usr/bin/env python
# 
# Niko Gonzales
# Niko.Gonzales@rackspace.com
# 
# A very simple manager for name.com's hosted DNS product.
# No classes, no extensive exception handling
# Just Ghetto python to do 4 things.
# 
# Please make it better if you have the need and the time
# 

import json
import prettytable
import httplib2
import os
from getopt import getopt,GetoptError
from sys import argv,exit
import ConfigParser

# (Niko) Isn't there a better way to do this?
conffile = os.environ['HOME'] + "/.namedotcom.conf"
base = "https://api.name.com"
token = ""
h = httplib2.Http()

try:
	config = ConfigParser.RawConfigParser()
	config.readfp(open(conffile))
	apiUsername = config.get("namedotcomconfig","username")
	apiToken = config.get("namedotcomconfig","api_token")
	apiAuthURL = config.get("namedotcomconfig", "api_auth_url")
except:
	raise Exception("Unable to read or find your ~/.namecomrc " \
	    "configuration file.")


def usage():
	print """
\033[33mName.com DNS Manager\033[0m\n
Usage: ./namedotcom [--username username] [--api_token token] <command>\n
--username - the username you use to login to the web interface
--api_token - the token you were given by support when you asked for it
<command> - can be any one of the following:
\t--list-domains                              - list all of your domains
\t--list-records <domain>                     - list all records in domain
\t--create-record <name>,<domain>,<ip>,<type> - create subdomain for domain
\t--delete-record <domain>,<record id>        - Delete a record\n\n"""
	exit(1)

if len(argv) <= 1:
    usage()

def _authenticate():
	authJson = {}
	authJson["username"] = apiUsername
	authJson["api_token"] = apiToken

	r, content = h.request(
		apiAuthURL, 'POST', json.JSONEncoder().encode(authJson),
		headers={'Content-type': 'application/json'})
	
	result = json.loads(content)
	
	if result["result"]["code"] == 100:
		token = result["session_token"]
	return token

def listRecords(domainName):
	token = _authenticate()
	nameListDnsRecords = base+"/api/dns/list/"+domainName
	r, content = h.request(nameListDnsRecords, 'GET', headers={
			'Content-type': 'application/json', 
			'Api-Session-Token':  token
			}
	)
	t = prettytable.PrettyTable(
		[
			"Created",
			"Name",
			"IP",
			"TTL",
			"Record ID",
			"Type"
		]
	)
	data = json.loads(content)
	for row in data["records"]:
		t.add_row([
		row["create_date"],
		row["name"],
		row["content"],
		row["ttl"],
		row["record_id"],
		row["type"]
		])
	print t

def listDomains():
	out = {}
	token = _authenticate()
	nameListDnsRecords = base+"/api/domain/list/"
	r, content = h.request(nameListDnsRecords, 'GET', headers={
		'Content-type': 'application/json',
		'Api-Session-Token':  token
		}
	)
	t = prettytable.PrettyTable(["Domain"])
	data = json.loads(content)
	for mkey,sd in data["domains"].iteritems():
		t.add_row([mkey])
	print t

def createRecord(hostname, domain, ip, recType):
	token = _authenticate()
	url = base+"/api/dns/create/"+domain
	newRecordParams = {}
	newRecordParams["hostname"] = hostname
	newRecordParams["type"] = recType
	newRecordParams["content"] = ip
	newRecordParams["ttl"] = 300
	newRecordParams["priority"] = 10
	r, content = h.request(
		url, 'POST', json.JSONEncoder().encode(newRecordParams),
		headers={'Content-type': 'application/json',
		'Api-Session-Token':  token
		}
	)
	data = json.loads(content)
	t = prettytable.PrettyTable(["Result"])
	t.add_row([data["result"]["message"]])
	print t

def deleteRecord(domain, recId):
	token = _authenticate()
	url = base+"/api/dns/delete/"+domain
	delRecordParams = {}
	delRecordParams["record_id"] = recId
	r, content = h.request(
		url, 'POST', json.JSONEncoder().encode(delRecordParams),
		headers={'Content-Type': 'application/json',
		'Api-Session-Token': token
		}
	)
	data = json.loads(content)
	t = prettytable.PrettyTable(["Result"])
	t.add_row([data["result"]["message"]])
	print t
	

def main():
	try:
		opts,args = getopt(
			argv[1:], "hu:a:A:",
			[
				"help",
				"username=",
				"api_token=", 
				"auth_url=",
				"list-domains", 
				"list-records=",
				"create-record=",
				"delete-record="
			]
		)
	except GetoptError as err:
		print str(err)
		usage()
	for opt, arg in opts:
		if opt in ("-h","--help"):
			usage()
		elif opt in ("-u","--username"):
			apiUsername = arg
		elif opt in ("-a","--api_token"):
			apiToken = arg
		elif opt in ("-A", "--auth_url"):
			apiAuthURL = arg
		elif opt in ("--list-domains"):
			listDomains()
		elif opt in ("--list-records"):
			listRecords(arg)
		elif opt in ("--create-record"):
			hostname, domain, ip, recType = arg.split(',')
			createRecord(hostname, domain, ip, recType)
		elif opt in ("--delete-record"):
			domain,recId = arg.split(',')
			deleteRecord(domain, recId)
		else:
			usage()


if __name__ == "__main__":
	main()


