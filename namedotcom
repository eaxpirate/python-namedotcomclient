#!/usr/bin/env python
# 
# A simple interface to Name.com's DNS API
# This is useful if you host your DNS with them.
#

from sys import argv,exit
from getopt import getopt,GetoptError

import os
import json
import string
import requests
import prettytable
import ConfigParser

try:
    conffile = os.environ['HOME'] + "/.namedotcom.conf"
except:
    print "WARN: Unable to read or find ~/.namecomrc configuration file"
    print "WARN: Attempting to write one"
    open(conffile, w)
    
base = "https://api.name.com"
token = ""
allowedChars = set(string.ascii_letters + string.digits + '-' + '.' + ':')
config = ConfigParser.RawConfigParser()
config.readfp(open(conffile))

apiUsername = config.get("namedotcomconfig","username")
apiToken = config.get("namedotcomconfig","api_token")

headers = {}
headers['Api-Username'] = apiUsername
headers['Api-Token'] = apiToken


def usage():
    print """
\033[33mName.com DNS Manager\033[0m\n
Usage: ./namedotcom <command>\n
<command> - can be any one of the following:
\t--list-domains                              - list all of your domains
\t--list-records <domain>                     - list all records in domain
\t--create-record <name>,<domain>,<ip>,<type> - create subdomain for domain
\t--delete-record <domain>,<record id>        - Delete a record\n\n"""
    exit(1)

if len(argv) <= 1:
    usage()

def _validateInput(str):
    if set(str) - allowedChars:
        print """Invalid characters detected.
        only 0-9,a-zA-Z, '\' and '-' are allowed."""
        exit(1)
    else:
        return(str)


def listRecords(input):
    domainName = _validateInput(input)
    nameListDnsRecords = base+"/api/dns/list/"+domainName
    r = requests.get(nameListDnsRecords, headers=headers)
    if r.status_code == 200:
        t = prettytable.PrettyTable(
            [
                "Created",
                "Name",
                "IP",
                "TTL",
                "Record ID",
                "Type"
            ]
        )
        data = r.json()
        for row in data["records"]:
            t.add_row([
            row["create_date"],
            row["name"],
            row["content"],
            row["ttl"],
            row["record_id"],
            row["type"]
            ])
        print t
    else:
        print "The remote API did not return status 200."
        print "name.com may be experiencing an outage"
        print "or there is a problem with your domain name"
        exit(1)

def listDomains():
    out = {}
    nameListDnsRecords = base+"/api/domain/list/"
    r = requests.get(nameListDnsRecords, headers=headers)
    if r.status_code == 200:
        t = prettytable.PrettyTable(["Domain"])
        data = r.json()
        for mkey,sd in data["domains"].iteritems():
            t.add_row([mkey])
        print t
    else:
        print "The remote API did not return status 200."
        print "name.com may be experiencing an outage"
        exit(1)
        

def createRecord(hostnameInput, domainInput, ipInput, recTypeInput):
    hostname = _validateInput(hostnameInput)
    domain = _validateInput(domainInput)
    ip = _validateInput(ipInput)
    recType = _validateInput(recTypeInput)
    url = base+"/api/dns/create/"+domain
    newRecordParams = {}
    newRecordParams["hostname"] = hostname
    newRecordParams["type"] = recType
    newRecordParams["content"] = ip
    newRecordParams["ttl"] = 300
    newRecordParams["priority"] = 10
    r = requests.post(
        url, data=json.dumps(newRecordParams),
        headers=headers
    )
    if r.status_code == 200:
        data = r.json()
        t = prettytable.PrettyTable(["Result"])
        t.add_row([data["result"]["message"]])
        print t
    else:
        print "The remote API did not return status 200 after your POST."
        print "name.com may be experiencing an outage"
        exit(1)
        

def deleteRecord(domainInput, recIdInput):
    domain = _validateInput(domainInput)
    recId = _validateInput(recIdInput)
    url = base+"/api/dns/delete/"+domain
    delRecordParams = {}
    delRecordParams["record_id"] = recId
    r = requests.post(
        url, data=json.dumps(delRecordParams),
        headers=headers
    )
    if r.status_code == 200:
        data = r.json()
        t = prettytable.PrettyTable(["Result"])
        t.add_row([data["result"]["message"]])
        print t
    else:
        print "The remote API did not return status 200 after your POST."
        print "name.com may be experiencing an outage"
        exit(1)

def main():
    try:
        opts,args = getopt(
            argv[1:], "h",
            [
                "help",
                "list-domains", 
                "list-records=",
                "create-record=",
                "delete-record="
            ]
        )

    except GetoptError as err:
        print str(err)
        usage()

    for opt, arg in opts:
        if opt in ("-h","--help"):
            usage()
        elif opt in ("--list-domains"):
            listDomains()
        elif opt in ("--list-records"):
            listRecords(arg)
        elif opt in ("--create-record"):
            hostname, domain, ip, recType = arg.split(',')
            createRecord(hostname, domain, ip, recType)
        elif opt in ("--delete-record"):
            domain,recId = arg.split(',')
            deleteRecord(domain, recId)
        else:
            usage()


if __name__ == "__main__":
    main()
